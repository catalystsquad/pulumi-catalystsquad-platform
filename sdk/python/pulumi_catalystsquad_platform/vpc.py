# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from ._inputs import *

__all__ = ['VpcArgs', 'Vpc']

@pulumi.input_type
class VpcArgs:
    def __init__(__self__, *,
                 availability_zone_config: Optional[pulumi.Input[Sequence[pulumi.Input['AvailabilityZoneArgs']]]] = None,
                 cidr: Optional[pulumi.Input[str]] = None,
                 enable_eks_cluster_tags: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a Vpc resource.
        :param pulumi.Input[Sequence[pulumi.Input['AvailabilityZoneArgs']]] availability_zone_config: Optional, list of AvailabilityZones to create subnets in. Default: []
        :param pulumi.Input[str] cidr: Optional, CIDR block of the VPC. Default: 10.0.0.0/16
        :param pulumi.Input[bool] enable_eks_cluster_tags: Optional, whether to enable required EKS cluster tags to subnets. Default: true
        :param pulumi.Input[str] name: Optional, Name tag value for VPC resource. Default: <stack name>
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Optional, tags to add to all resources. Default: {}
        """
        if availability_zone_config is not None:
            pulumi.set(__self__, "availability_zone_config", availability_zone_config)
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)
        if enable_eks_cluster_tags is not None:
            pulumi.set(__self__, "enable_eks_cluster_tags", enable_eks_cluster_tags)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="availabilityZoneConfig")
    def availability_zone_config(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AvailabilityZoneArgs']]]]:
        """
        Optional, list of AvailabilityZones to create subnets in. Default: []
        """
        return pulumi.get(self, "availability_zone_config")

    @availability_zone_config.setter
    def availability_zone_config(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AvailabilityZoneArgs']]]]):
        pulumi.set(self, "availability_zone_config", value)

    @property
    @pulumi.getter
    def cidr(self) -> Optional[pulumi.Input[str]]:
        """
        Optional, CIDR block of the VPC. Default: 10.0.0.0/16
        """
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cidr", value)

    @property
    @pulumi.getter(name="enableEksClusterTags")
    def enable_eks_cluster_tags(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional, whether to enable required EKS cluster tags to subnets. Default: true
        """
        return pulumi.get(self, "enable_eks_cluster_tags")

    @enable_eks_cluster_tags.setter
    def enable_eks_cluster_tags(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_eks_cluster_tags", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Optional, Name tag value for VPC resource. Default: <stack name>
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Optional, tags to add to all resources. Default: {}
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


class Vpc(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 availability_zone_config: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AvailabilityZoneArgs']]]]] = None,
                 cidr: Optional[pulumi.Input[str]] = None,
                 enable_eks_cluster_tags: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Create a Vpc resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AvailabilityZoneArgs']]]] availability_zone_config: Optional, list of AvailabilityZones to create subnets in. Default: []
        :param pulumi.Input[str] cidr: Optional, CIDR block of the VPC. Default: 10.0.0.0/16
        :param pulumi.Input[bool] enable_eks_cluster_tags: Optional, whether to enable required EKS cluster tags to subnets. Default: true
        :param pulumi.Input[str] name: Optional, Name tag value for VPC resource. Default: <stack name>
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Optional, tags to add to all resources. Default: {}
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[VpcArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Vpc resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VpcArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VpcArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 availability_zone_config: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AvailabilityZoneArgs']]]]] = None,
                 cidr: Optional[pulumi.Input[str]] = None,
                 enable_eks_cluster_tags: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VpcArgs.__new__(VpcArgs)

            __props__.__dict__["availability_zone_config"] = availability_zone_config
            __props__.__dict__["cidr"] = cidr
            __props__.__dict__["enable_eks_cluster_tags"] = enable_eks_cluster_tags
            __props__.__dict__["name"] = name
            __props__.__dict__["tags"] = tags
            __props__.__dict__["nat_gateway_ips"] = None
            __props__.__dict__["private_subnet_ids"] = None
            __props__.__dict__["public_subnet_ids"] = None
            __props__.__dict__["vpc_id"] = None
        super(Vpc, __self__).__init__(
            'catalystsquad-platform:index:Vpc',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter(name="natGatewayIPs")
    def nat_gateway_ips(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Static IPs for all NAT gateways
        """
        return pulumi.get(self, "nat_gateway_ips")

    @property
    @pulumi.getter(name="privateSubnetIDs")
    def private_subnet_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        IDs for all private subnets
        """
        return pulumi.get(self, "private_subnet_ids")

    @property
    @pulumi.getter(name="publicSubnetIDs")
    def public_subnet_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        IDs for all public subnets
        """
        return pulumi.get(self, "public_subnet_ids")

    @property
    @pulumi.getter(name="vpcID")
    def vpc_id(self) -> pulumi.Output[str]:
        """
        CIDR for the VPC
        """
        return pulumi.get(self, "vpc_id")

