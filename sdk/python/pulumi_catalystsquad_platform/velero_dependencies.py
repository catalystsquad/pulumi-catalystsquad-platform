# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['VeleroDependenciesArgs', 'VeleroDependencies']

@pulumi.input_type
class VeleroDependenciesArgs:
    def __init__(__self__, *,
                 oidc_provider_arn: pulumi.Input[str],
                 oidc_provider_url: pulumi.Input[str],
                 create_bucket: Optional[pulumi.Input[bool]] = None,
                 velero_bucket_name: Optional[pulumi.Input[str]] = None,
                 velero_iam_policy_name: Optional[pulumi.Input[str]] = None,
                 velero_iam_role_name: Optional[pulumi.Input[str]] = None,
                 velero_namespace: Optional[pulumi.Input[str]] = None,
                 velero_service_account: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a VeleroDependencies resource.
        :param pulumi.Input[str] oidc_provider_arn: Required, Arn of EKS OIDC Provider for configuring the IRSA  IAM role trust relationship.
        :param pulumi.Input[str] oidc_provider_url: Required, URL of EKS OIDC Provider for configuring the IRSA  IAM role trust relationship.
        :param pulumi.Input[bool] create_bucket: Optional, whether to create the Velero S3 bucket. Allows the bucket to exist outside of pulumi. Default: true
        :param pulumi.Input[str] velero_bucket_name: Optional, Velero's bucket name. Default: <account-id>-<stack-name>-velero
        :param pulumi.Input[str] velero_iam_policy_name: Optional, Velero's IAM policy name. Default: <stack-name>-velero-policy
        :param pulumi.Input[str] velero_iam_role_name: Optional, Velero's IAM role name. Default: <stack-name>-velero-role
        :param pulumi.Input[str] velero_namespace: Optional, kubernetes namespace where Velero will exist, for configuring the IRSA IAM role trust relationship. Default: velero
        :param pulumi.Input[str] velero_service_account: Optional, kubernetes service account name that Velero will use, for configuring the IRSA IAM role trust relationship. Default: velero
        """
        pulumi.set(__self__, "oidc_provider_arn", oidc_provider_arn)
        pulumi.set(__self__, "oidc_provider_url", oidc_provider_url)
        if create_bucket is not None:
            pulumi.set(__self__, "create_bucket", create_bucket)
        if velero_bucket_name is not None:
            pulumi.set(__self__, "velero_bucket_name", velero_bucket_name)
        if velero_iam_policy_name is not None:
            pulumi.set(__self__, "velero_iam_policy_name", velero_iam_policy_name)
        if velero_iam_role_name is not None:
            pulumi.set(__self__, "velero_iam_role_name", velero_iam_role_name)
        if velero_namespace is not None:
            pulumi.set(__self__, "velero_namespace", velero_namespace)
        if velero_service_account is not None:
            pulumi.set(__self__, "velero_service_account", velero_service_account)

    @property
    @pulumi.getter(name="oidcProviderArn")
    def oidc_provider_arn(self) -> pulumi.Input[str]:
        """
        Required, Arn of EKS OIDC Provider for configuring the IRSA  IAM role trust relationship.
        """
        return pulumi.get(self, "oidc_provider_arn")

    @oidc_provider_arn.setter
    def oidc_provider_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "oidc_provider_arn", value)

    @property
    @pulumi.getter(name="oidcProviderUrl")
    def oidc_provider_url(self) -> pulumi.Input[str]:
        """
        Required, URL of EKS OIDC Provider for configuring the IRSA  IAM role trust relationship.
        """
        return pulumi.get(self, "oidc_provider_url")

    @oidc_provider_url.setter
    def oidc_provider_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "oidc_provider_url", value)

    @property
    @pulumi.getter(name="createBucket")
    def create_bucket(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional, whether to create the Velero S3 bucket. Allows the bucket to exist outside of pulumi. Default: true
        """
        return pulumi.get(self, "create_bucket")

    @create_bucket.setter
    def create_bucket(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_bucket", value)

    @property
    @pulumi.getter(name="veleroBucketName")
    def velero_bucket_name(self) -> Optional[pulumi.Input[str]]:
        """
        Optional, Velero's bucket name. Default: <account-id>-<stack-name>-velero
        """
        return pulumi.get(self, "velero_bucket_name")

    @velero_bucket_name.setter
    def velero_bucket_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "velero_bucket_name", value)

    @property
    @pulumi.getter(name="veleroIAMPolicyName")
    def velero_iam_policy_name(self) -> Optional[pulumi.Input[str]]:
        """
        Optional, Velero's IAM policy name. Default: <stack-name>-velero-policy
        """
        return pulumi.get(self, "velero_iam_policy_name")

    @velero_iam_policy_name.setter
    def velero_iam_policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "velero_iam_policy_name", value)

    @property
    @pulumi.getter(name="veleroIAMRoleName")
    def velero_iam_role_name(self) -> Optional[pulumi.Input[str]]:
        """
        Optional, Velero's IAM role name. Default: <stack-name>-velero-role
        """
        return pulumi.get(self, "velero_iam_role_name")

    @velero_iam_role_name.setter
    def velero_iam_role_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "velero_iam_role_name", value)

    @property
    @pulumi.getter(name="veleroNamespace")
    def velero_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Optional, kubernetes namespace where Velero will exist, for configuring the IRSA IAM role trust relationship. Default: velero
        """
        return pulumi.get(self, "velero_namespace")

    @velero_namespace.setter
    def velero_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "velero_namespace", value)

    @property
    @pulumi.getter(name="veleroServiceAccount")
    def velero_service_account(self) -> Optional[pulumi.Input[str]]:
        """
        Optional, kubernetes service account name that Velero will use, for configuring the IRSA IAM role trust relationship. Default: velero
        """
        return pulumi.get(self, "velero_service_account")

    @velero_service_account.setter
    def velero_service_account(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "velero_service_account", value)


class VeleroDependencies(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 create_bucket: Optional[pulumi.Input[bool]] = None,
                 oidc_provider_arn: Optional[pulumi.Input[str]] = None,
                 oidc_provider_url: Optional[pulumi.Input[str]] = None,
                 velero_bucket_name: Optional[pulumi.Input[str]] = None,
                 velero_iam_policy_name: Optional[pulumi.Input[str]] = None,
                 velero_iam_role_name: Optional[pulumi.Input[str]] = None,
                 velero_namespace: Optional[pulumi.Input[str]] = None,
                 velero_service_account: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a VeleroDependencies resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] create_bucket: Optional, whether to create the Velero S3 bucket. Allows the bucket to exist outside of pulumi. Default: true
        :param pulumi.Input[str] oidc_provider_arn: Required, Arn of EKS OIDC Provider for configuring the IRSA  IAM role trust relationship.
        :param pulumi.Input[str] oidc_provider_url: Required, URL of EKS OIDC Provider for configuring the IRSA  IAM role trust relationship.
        :param pulumi.Input[str] velero_bucket_name: Optional, Velero's bucket name. Default: <account-id>-<stack-name>-velero
        :param pulumi.Input[str] velero_iam_policy_name: Optional, Velero's IAM policy name. Default: <stack-name>-velero-policy
        :param pulumi.Input[str] velero_iam_role_name: Optional, Velero's IAM role name. Default: <stack-name>-velero-role
        :param pulumi.Input[str] velero_namespace: Optional, kubernetes namespace where Velero will exist, for configuring the IRSA IAM role trust relationship. Default: velero
        :param pulumi.Input[str] velero_service_account: Optional, kubernetes service account name that Velero will use, for configuring the IRSA IAM role trust relationship. Default: velero
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VeleroDependenciesArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a VeleroDependencies resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VeleroDependenciesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VeleroDependenciesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 create_bucket: Optional[pulumi.Input[bool]] = None,
                 oidc_provider_arn: Optional[pulumi.Input[str]] = None,
                 oidc_provider_url: Optional[pulumi.Input[str]] = None,
                 velero_bucket_name: Optional[pulumi.Input[str]] = None,
                 velero_iam_policy_name: Optional[pulumi.Input[str]] = None,
                 velero_iam_role_name: Optional[pulumi.Input[str]] = None,
                 velero_namespace: Optional[pulumi.Input[str]] = None,
                 velero_service_account: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VeleroDependenciesArgs.__new__(VeleroDependenciesArgs)

            __props__.__dict__["create_bucket"] = create_bucket
            if oidc_provider_arn is None and not opts.urn:
                raise TypeError("Missing required property 'oidc_provider_arn'")
            __props__.__dict__["oidc_provider_arn"] = oidc_provider_arn
            if oidc_provider_url is None and not opts.urn:
                raise TypeError("Missing required property 'oidc_provider_url'")
            __props__.__dict__["oidc_provider_url"] = oidc_provider_url
            __props__.__dict__["velero_bucket_name"] = velero_bucket_name
            __props__.__dict__["velero_iam_policy_name"] = velero_iam_policy_name
            __props__.__dict__["velero_iam_role_name"] = velero_iam_role_name
            __props__.__dict__["velero_namespace"] = velero_namespace
            __props__.__dict__["velero_service_account"] = velero_service_account
        super(VeleroDependencies, __self__).__init__(
            'catalystsquad-platform:index:VeleroDependencies',
            resource_name,
            __props__,
            opts,
            remote=True)

