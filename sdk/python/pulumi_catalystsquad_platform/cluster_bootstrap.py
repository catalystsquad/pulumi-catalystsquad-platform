# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from ._inputs import *

__all__ = ['ClusterBootstrapArgs', 'ClusterBootstrap']

@pulumi.input_type
class ClusterBootstrapArgs:
    def __init__(__self__, *,
                 argocd_helm_config: Optional[pulumi.Input['HelmReleaseConfigArgs']] = None,
                 eks_auth_configmap_config: Optional[pulumi.Input['AuthConfigMapConfigArgs']] = None,
                 kube_prometheus_stack_helm_config: Optional[pulumi.Input['HelmReleaseConfigArgs']] = None,
                 platform_application_config: Optional[pulumi.Input['PlatformApplicationConfigArgs']] = None,
                 prometheus_remote_write_config: Optional[pulumi.Input['PrometheusRemoteWriteConfigArgs']] = None):
        """
        The set of arguments for constructing a ClusterBootstrap resource.
        :param pulumi.Input['HelmReleaseConfigArgs'] argocd_helm_config: Optional, configures the argocd helm release.
        :param pulumi.Input['AuthConfigMapConfigArgs'] eks_auth_configmap_config: Optional, configures management of the eks auth configmap. Does not manage the configmap if not specified.
        :param pulumi.Input['HelmReleaseConfigArgs'] kube_prometheus_stack_helm_config: Optional, configures the kube-prometheus-stack helm release.
        :param pulumi.Input['PlatformApplicationConfigArgs'] platform_application_config: Optional, configures the platform application release. Does not deploy if not specified.
        :param pulumi.Input['PrometheusRemoteWriteConfigArgs'] prometheus_remote_write_config: Optional, configuration for a prometheus remoteWrite secret. Does not deploy if not specified.
        """
        if argocd_helm_config is not None:
            pulumi.set(__self__, "argocd_helm_config", argocd_helm_config)
        if eks_auth_configmap_config is not None:
            pulumi.set(__self__, "eks_auth_configmap_config", eks_auth_configmap_config)
        if kube_prometheus_stack_helm_config is not None:
            pulumi.set(__self__, "kube_prometheus_stack_helm_config", kube_prometheus_stack_helm_config)
        if platform_application_config is not None:
            pulumi.set(__self__, "platform_application_config", platform_application_config)
        if prometheus_remote_write_config is not None:
            pulumi.set(__self__, "prometheus_remote_write_config", prometheus_remote_write_config)

    @property
    @pulumi.getter(name="argocdHelmConfig")
    def argocd_helm_config(self) -> Optional[pulumi.Input['HelmReleaseConfigArgs']]:
        """
        Optional, configures the argocd helm release.
        """
        return pulumi.get(self, "argocd_helm_config")

    @argocd_helm_config.setter
    def argocd_helm_config(self, value: Optional[pulumi.Input['HelmReleaseConfigArgs']]):
        pulumi.set(self, "argocd_helm_config", value)

    @property
    @pulumi.getter(name="eksAuthConfigmapConfig")
    def eks_auth_configmap_config(self) -> Optional[pulumi.Input['AuthConfigMapConfigArgs']]:
        """
        Optional, configures management of the eks auth configmap. Does not manage the configmap if not specified.
        """
        return pulumi.get(self, "eks_auth_configmap_config")

    @eks_auth_configmap_config.setter
    def eks_auth_configmap_config(self, value: Optional[pulumi.Input['AuthConfigMapConfigArgs']]):
        pulumi.set(self, "eks_auth_configmap_config", value)

    @property
    @pulumi.getter(name="kubePrometheusStackHelmConfig")
    def kube_prometheus_stack_helm_config(self) -> Optional[pulumi.Input['HelmReleaseConfigArgs']]:
        """
        Optional, configures the kube-prometheus-stack helm release.
        """
        return pulumi.get(self, "kube_prometheus_stack_helm_config")

    @kube_prometheus_stack_helm_config.setter
    def kube_prometheus_stack_helm_config(self, value: Optional[pulumi.Input['HelmReleaseConfigArgs']]):
        pulumi.set(self, "kube_prometheus_stack_helm_config", value)

    @property
    @pulumi.getter(name="platformApplicationConfig")
    def platform_application_config(self) -> Optional[pulumi.Input['PlatformApplicationConfigArgs']]:
        """
        Optional, configures the platform application release. Does not deploy if not specified.
        """
        return pulumi.get(self, "platform_application_config")

    @platform_application_config.setter
    def platform_application_config(self, value: Optional[pulumi.Input['PlatformApplicationConfigArgs']]):
        pulumi.set(self, "platform_application_config", value)

    @property
    @pulumi.getter(name="prometheusRemoteWriteConfig")
    def prometheus_remote_write_config(self) -> Optional[pulumi.Input['PrometheusRemoteWriteConfigArgs']]:
        """
        Optional, configuration for a prometheus remoteWrite secret. Does not deploy if not specified.
        """
        return pulumi.get(self, "prometheus_remote_write_config")

    @prometheus_remote_write_config.setter
    def prometheus_remote_write_config(self, value: Optional[pulumi.Input['PrometheusRemoteWriteConfigArgs']]):
        pulumi.set(self, "prometheus_remote_write_config", value)


class ClusterBootstrap(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 argocd_helm_config: Optional[pulumi.Input[pulumi.InputType['HelmReleaseConfigArgs']]] = None,
                 eks_auth_configmap_config: Optional[pulumi.Input[pulumi.InputType['AuthConfigMapConfigArgs']]] = None,
                 kube_prometheus_stack_helm_config: Optional[pulumi.Input[pulumi.InputType['HelmReleaseConfigArgs']]] = None,
                 platform_application_config: Optional[pulumi.Input[pulumi.InputType['PlatformApplicationConfigArgs']]] = None,
                 prometheus_remote_write_config: Optional[pulumi.Input[pulumi.InputType['PrometheusRemoteWriteConfigArgs']]] = None,
                 __props__=None):
        """
        Create a ClusterBootstrap resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['HelmReleaseConfigArgs']] argocd_helm_config: Optional, configures the argocd helm release.
        :param pulumi.Input[pulumi.InputType['AuthConfigMapConfigArgs']] eks_auth_configmap_config: Optional, configures management of the eks auth configmap. Does not manage the configmap if not specified.
        :param pulumi.Input[pulumi.InputType['HelmReleaseConfigArgs']] kube_prometheus_stack_helm_config: Optional, configures the kube-prometheus-stack helm release.
        :param pulumi.Input[pulumi.InputType['PlatformApplicationConfigArgs']] platform_application_config: Optional, configures the platform application release. Does not deploy if not specified.
        :param pulumi.Input[pulumi.InputType['PrometheusRemoteWriteConfigArgs']] prometheus_remote_write_config: Optional, configuration for a prometheus remoteWrite secret. Does not deploy if not specified.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ClusterBootstrapArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ClusterBootstrap resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ClusterBootstrapArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ClusterBootstrapArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 argocd_helm_config: Optional[pulumi.Input[pulumi.InputType['HelmReleaseConfigArgs']]] = None,
                 eks_auth_configmap_config: Optional[pulumi.Input[pulumi.InputType['AuthConfigMapConfigArgs']]] = None,
                 kube_prometheus_stack_helm_config: Optional[pulumi.Input[pulumi.InputType['HelmReleaseConfigArgs']]] = None,
                 platform_application_config: Optional[pulumi.Input[pulumi.InputType['PlatformApplicationConfigArgs']]] = None,
                 prometheus_remote_write_config: Optional[pulumi.Input[pulumi.InputType['PrometheusRemoteWriteConfigArgs']]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ClusterBootstrapArgs.__new__(ClusterBootstrapArgs)

            __props__.__dict__["argocd_helm_config"] = argocd_helm_config
            __props__.__dict__["eks_auth_configmap_config"] = eks_auth_configmap_config
            __props__.__dict__["kube_prometheus_stack_helm_config"] = kube_prometheus_stack_helm_config
            __props__.__dict__["platform_application_config"] = platform_application_config
            __props__.__dict__["prometheus_remote_write_config"] = prometheus_remote_write_config
        super(ClusterBootstrap, __self__).__init__(
            'catalystsquad-platform:index:ClusterBootstrap',
            resource_name,
            __props__,
            opts,
            remote=True)

