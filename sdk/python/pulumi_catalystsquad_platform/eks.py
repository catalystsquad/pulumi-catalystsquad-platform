# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from ._inputs import *
import pulumi_aws
import pulumi_kubernetes

__all__ = ['EksArgs', 'Eks']

@pulumi.input_type
class EksArgs:
    def __init__(__self__, *,
                 node_group_config: pulumi.Input[Sequence[pulumi.Input['EksNodeGroupArgs']]],
                 subnet_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 auth_configmap_config: Optional[pulumi.Input['AuthConfigMapConfigArgs']] = None,
                 cluster_autoscaler_namespace: Optional[pulumi.Input[str]] = None,
                 cluster_autoscaler_service_account: Optional[pulumi.Input[str]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 enable_cluster_autoscaler_resources: Optional[pulumi.Input[bool]] = None,
                 enable_ecr_access: Optional[pulumi.Input[bool]] = None,
                 enabled_cluster_log_types: Optional[pulumi.Input[str]] = None,
                 k8s_version: Optional[pulumi.Input[str]] = None,
                 kube_config_assume_role_arn: Optional[pulumi.Input[str]] = None,
                 kube_config_aws_profile: Optional[pulumi.Input[str]] = None,
                 node_group_version: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Eks resource.
        :param pulumi.Input[Sequence[pulumi.Input['EksNodeGroupArgs']]] node_group_config: Required, list of nodegroup configurations to create.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnet_ids: Required, list of subnet IDs to deploy the cluster and nodegroups to
        :param pulumi.Input['AuthConfigMapConfigArgs'] auth_configmap_config: Optional, configures management of the eks auth configmap.
        :param pulumi.Input[str] cluster_autoscaler_namespace: Optional, cluster autoscaler namespace for IRSA. Default: cluster-autoscaler
        :param pulumi.Input[str] cluster_autoscaler_service_account: Optional, cluster autoscaler service account name for IRSA. Default: cluster-autoscaler
        :param pulumi.Input[str] cluster_name: Optional, name of the EKS cluster. Default: <stack name>
        :param pulumi.Input[bool] enable_cluster_autoscaler_resources: Optional, whether to enable cluster autoscaler IRSA resources. Default: true
        :param pulumi.Input[bool] enable_ecr_access: Optional, whether to enable ECR access policy on nodegroups. Default: true
        :param pulumi.Input[str] enabled_cluster_log_types: Optional, list of log types to enable on the cluster. Default: []
        :param pulumi.Input[str] k8s_version: Optional, k8s version of the EKS cluster. Default: 1.22.6
        :param pulumi.Input[str] kube_config_assume_role_arn: Optional, assume role arn to add to the kubeconfig.
        :param pulumi.Input[str] kube_config_aws_profile: Optional, AWS profile to add to the kubeconfig.
        :param pulumi.Input[str] node_group_version: Optional, k8s version of all node groups. Allows for upgrading the control plane before upgrading nodegroups. Default: <k8sVersion>
        """
        pulumi.set(__self__, "node_group_config", node_group_config)
        pulumi.set(__self__, "subnet_ids", subnet_ids)
        if auth_configmap_config is not None:
            pulumi.set(__self__, "auth_configmap_config", auth_configmap_config)
        if cluster_autoscaler_namespace is not None:
            pulumi.set(__self__, "cluster_autoscaler_namespace", cluster_autoscaler_namespace)
        if cluster_autoscaler_service_account is not None:
            pulumi.set(__self__, "cluster_autoscaler_service_account", cluster_autoscaler_service_account)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if enable_cluster_autoscaler_resources is not None:
            pulumi.set(__self__, "enable_cluster_autoscaler_resources", enable_cluster_autoscaler_resources)
        if enable_ecr_access is not None:
            pulumi.set(__self__, "enable_ecr_access", enable_ecr_access)
        if enabled_cluster_log_types is not None:
            pulumi.set(__self__, "enabled_cluster_log_types", enabled_cluster_log_types)
        if k8s_version is not None:
            pulumi.set(__self__, "k8s_version", k8s_version)
        if kube_config_assume_role_arn is not None:
            pulumi.set(__self__, "kube_config_assume_role_arn", kube_config_assume_role_arn)
        if kube_config_aws_profile is not None:
            pulumi.set(__self__, "kube_config_aws_profile", kube_config_aws_profile)
        if node_group_version is not None:
            pulumi.set(__self__, "node_group_version", node_group_version)

    @property
    @pulumi.getter(name="nodeGroupConfig")
    def node_group_config(self) -> pulumi.Input[Sequence[pulumi.Input['EksNodeGroupArgs']]]:
        """
        Required, list of nodegroup configurations to create.
        """
        return pulumi.get(self, "node_group_config")

    @node_group_config.setter
    def node_group_config(self, value: pulumi.Input[Sequence[pulumi.Input['EksNodeGroupArgs']]]):
        pulumi.set(self, "node_group_config", value)

    @property
    @pulumi.getter(name="subnetIDs")
    def subnet_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Required, list of subnet IDs to deploy the cluster and nodegroups to
        """
        return pulumi.get(self, "subnet_ids")

    @subnet_ids.setter
    def subnet_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "subnet_ids", value)

    @property
    @pulumi.getter(name="authConfigmapConfig")
    def auth_configmap_config(self) -> Optional[pulumi.Input['AuthConfigMapConfigArgs']]:
        """
        Optional, configures management of the eks auth configmap.
        """
        return pulumi.get(self, "auth_configmap_config")

    @auth_configmap_config.setter
    def auth_configmap_config(self, value: Optional[pulumi.Input['AuthConfigMapConfigArgs']]):
        pulumi.set(self, "auth_configmap_config", value)

    @property
    @pulumi.getter(name="clusterAutoscalerNamespace")
    def cluster_autoscaler_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Optional, cluster autoscaler namespace for IRSA. Default: cluster-autoscaler
        """
        return pulumi.get(self, "cluster_autoscaler_namespace")

    @cluster_autoscaler_namespace.setter
    def cluster_autoscaler_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_autoscaler_namespace", value)

    @property
    @pulumi.getter(name="clusterAutoscalerServiceAccount")
    def cluster_autoscaler_service_account(self) -> Optional[pulumi.Input[str]]:
        """
        Optional, cluster autoscaler service account name for IRSA. Default: cluster-autoscaler
        """
        return pulumi.get(self, "cluster_autoscaler_service_account")

    @cluster_autoscaler_service_account.setter
    def cluster_autoscaler_service_account(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_autoscaler_service_account", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[str]]:
        """
        Optional, name of the EKS cluster. Default: <stack name>
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="enableClusterAutoscalerResources")
    def enable_cluster_autoscaler_resources(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional, whether to enable cluster autoscaler IRSA resources. Default: true
        """
        return pulumi.get(self, "enable_cluster_autoscaler_resources")

    @enable_cluster_autoscaler_resources.setter
    def enable_cluster_autoscaler_resources(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_cluster_autoscaler_resources", value)

    @property
    @pulumi.getter(name="enableECRAccess")
    def enable_ecr_access(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional, whether to enable ECR access policy on nodegroups. Default: true
        """
        return pulumi.get(self, "enable_ecr_access")

    @enable_ecr_access.setter
    def enable_ecr_access(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_ecr_access", value)

    @property
    @pulumi.getter(name="enabledClusterLogTypes")
    def enabled_cluster_log_types(self) -> Optional[pulumi.Input[str]]:
        """
        Optional, list of log types to enable on the cluster. Default: []
        """
        return pulumi.get(self, "enabled_cluster_log_types")

    @enabled_cluster_log_types.setter
    def enabled_cluster_log_types(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enabled_cluster_log_types", value)

    @property
    @pulumi.getter(name="k8sVersion")
    def k8s_version(self) -> Optional[pulumi.Input[str]]:
        """
        Optional, k8s version of the EKS cluster. Default: 1.22.6
        """
        return pulumi.get(self, "k8s_version")

    @k8s_version.setter
    def k8s_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "k8s_version", value)

    @property
    @pulumi.getter(name="kubeConfigAssumeRoleArn")
    def kube_config_assume_role_arn(self) -> Optional[pulumi.Input[str]]:
        """
        Optional, assume role arn to add to the kubeconfig.
        """
        return pulumi.get(self, "kube_config_assume_role_arn")

    @kube_config_assume_role_arn.setter
    def kube_config_assume_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kube_config_assume_role_arn", value)

    @property
    @pulumi.getter(name="kubeConfigAwsProfile")
    def kube_config_aws_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Optional, AWS profile to add to the kubeconfig.
        """
        return pulumi.get(self, "kube_config_aws_profile")

    @kube_config_aws_profile.setter
    def kube_config_aws_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kube_config_aws_profile", value)

    @property
    @pulumi.getter(name="nodeGroupVersion")
    def node_group_version(self) -> Optional[pulumi.Input[str]]:
        """
        Optional, k8s version of all node groups. Allows for upgrading the control plane before upgrading nodegroups. Default: <k8sVersion>
        """
        return pulumi.get(self, "node_group_version")

    @node_group_version.setter
    def node_group_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_group_version", value)


class Eks(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_configmap_config: Optional[pulumi.Input[pulumi.InputType['AuthConfigMapConfigArgs']]] = None,
                 cluster_autoscaler_namespace: Optional[pulumi.Input[str]] = None,
                 cluster_autoscaler_service_account: Optional[pulumi.Input[str]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 enable_cluster_autoscaler_resources: Optional[pulumi.Input[bool]] = None,
                 enable_ecr_access: Optional[pulumi.Input[bool]] = None,
                 enabled_cluster_log_types: Optional[pulumi.Input[str]] = None,
                 k8s_version: Optional[pulumi.Input[str]] = None,
                 kube_config_assume_role_arn: Optional[pulumi.Input[str]] = None,
                 kube_config_aws_profile: Optional[pulumi.Input[str]] = None,
                 node_group_config: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EksNodeGroupArgs']]]]] = None,
                 node_group_version: Optional[pulumi.Input[str]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Create a Eks resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['AuthConfigMapConfigArgs']] auth_configmap_config: Optional, configures management of the eks auth configmap.
        :param pulumi.Input[str] cluster_autoscaler_namespace: Optional, cluster autoscaler namespace for IRSA. Default: cluster-autoscaler
        :param pulumi.Input[str] cluster_autoscaler_service_account: Optional, cluster autoscaler service account name for IRSA. Default: cluster-autoscaler
        :param pulumi.Input[str] cluster_name: Optional, name of the EKS cluster. Default: <stack name>
        :param pulumi.Input[bool] enable_cluster_autoscaler_resources: Optional, whether to enable cluster autoscaler IRSA resources. Default: true
        :param pulumi.Input[bool] enable_ecr_access: Optional, whether to enable ECR access policy on nodegroups. Default: true
        :param pulumi.Input[str] enabled_cluster_log_types: Optional, list of log types to enable on the cluster. Default: []
        :param pulumi.Input[str] k8s_version: Optional, k8s version of the EKS cluster. Default: 1.22.6
        :param pulumi.Input[str] kube_config_assume_role_arn: Optional, assume role arn to add to the kubeconfig.
        :param pulumi.Input[str] kube_config_aws_profile: Optional, AWS profile to add to the kubeconfig.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EksNodeGroupArgs']]]] node_group_config: Required, list of nodegroup configurations to create.
        :param pulumi.Input[str] node_group_version: Optional, k8s version of all node groups. Allows for upgrading the control plane before upgrading nodegroups. Default: <k8sVersion>
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnet_ids: Required, list of subnet IDs to deploy the cluster and nodegroups to
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EksArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Eks resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param EksArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EksArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_configmap_config: Optional[pulumi.Input[pulumi.InputType['AuthConfigMapConfigArgs']]] = None,
                 cluster_autoscaler_namespace: Optional[pulumi.Input[str]] = None,
                 cluster_autoscaler_service_account: Optional[pulumi.Input[str]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 enable_cluster_autoscaler_resources: Optional[pulumi.Input[bool]] = None,
                 enable_ecr_access: Optional[pulumi.Input[bool]] = None,
                 enabled_cluster_log_types: Optional[pulumi.Input[str]] = None,
                 k8s_version: Optional[pulumi.Input[str]] = None,
                 kube_config_assume_role_arn: Optional[pulumi.Input[str]] = None,
                 kube_config_aws_profile: Optional[pulumi.Input[str]] = None,
                 node_group_config: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EksNodeGroupArgs']]]]] = None,
                 node_group_version: Optional[pulumi.Input[str]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EksArgs.__new__(EksArgs)

            __props__.__dict__["auth_configmap_config"] = auth_configmap_config
            __props__.__dict__["cluster_autoscaler_namespace"] = cluster_autoscaler_namespace
            __props__.__dict__["cluster_autoscaler_service_account"] = cluster_autoscaler_service_account
            __props__.__dict__["cluster_name"] = cluster_name
            __props__.__dict__["enable_cluster_autoscaler_resources"] = enable_cluster_autoscaler_resources
            __props__.__dict__["enable_ecr_access"] = enable_ecr_access
            __props__.__dict__["enabled_cluster_log_types"] = enabled_cluster_log_types
            __props__.__dict__["k8s_version"] = k8s_version
            __props__.__dict__["kube_config_assume_role_arn"] = kube_config_assume_role_arn
            __props__.__dict__["kube_config_aws_profile"] = kube_config_aws_profile
            if node_group_config is None and not opts.urn:
                raise TypeError("Missing required property 'node_group_config'")
            __props__.__dict__["node_group_config"] = node_group_config
            __props__.__dict__["node_group_version"] = node_group_version
            if subnet_ids is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_ids'")
            __props__.__dict__["subnet_ids"] = subnet_ids
            __props__.__dict__["cluster"] = None
            __props__.__dict__["kube_config"] = None
            __props__.__dict__["kubernetes_provider"] = None
            __props__.__dict__["node_group_iam_role_arn"] = None
            __props__.__dict__["oidc_provider"] = None
        super(Eks, __self__).__init__(
            'catalystsquad-platform:index:Eks',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter
    def cluster(self) -> pulumi.Output['pulumi_aws.eks.Cluster']:
        return pulumi.get(self, "cluster")

    @property
    @pulumi.getter(name="kubeConfig")
    def kube_config(self) -> pulumi.Output[str]:
        return pulumi.get(self, "kube_config")

    @property
    @pulumi.getter(name="kubernetesProvider")
    def kubernetes_provider(self) -> pulumi.Output[Optional['pulumi_kubernetes.Provider']]:
        return pulumi.get(self, "kubernetes_provider")

    @property
    @pulumi.getter(name="nodeGroupIAMRoleArn")
    def node_group_iam_role_arn(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "node_group_iam_role_arn")

    @property
    @pulumi.getter(name="oidcProvider")
    def oidc_provider(self) -> pulumi.Output['pulumi_aws.iam.OpenIdConnectProvider']:
        return pulumi.get(self, "oidc_provider")

