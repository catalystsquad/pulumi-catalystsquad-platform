// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.CatalystsquadPlatform
{
    [CatalystsquadPlatformResourceType("catalystsquad-platform:index:ObservabilityDependencies")]
    public partial class ObservabilityDependencies : Pulumi.ComponentResource
    {
        /// <summary>
        /// Create a ObservabilityDependencies resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ObservabilityDependencies(string name, ObservabilityDependenciesArgs args, ComponentResourceOptions? options = null)
            : base("catalystsquad-platform:index:ObservabilityDependencies", name, args ?? new ObservabilityDependenciesArgs(), MakeResourceOptions(options, ""), remote: true)
        {
        }

        private static ComponentResourceOptions MakeResourceOptions(ComponentResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new ComponentResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/catalystsquad/pulumi-catalystsquad-platform/releases/download/v${VERSION}",
            };
            var merged = ComponentResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
    }

    public sealed class ObservabilityDependenciesArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Optional, name of bucket to create for Cortex. Default: &lt;account-id&gt;-&lt;stack-name&gt;-cortex
        /// </summary>
        [Input("cortexBucketName")]
        public Input<string>? CortexBucketName { get; set; }

        /// <summary>
        /// Optional, kubernetes namespace where Cortex will exist, for configuring the IRSA IAM role trust relationship. Default: cortex
        /// </summary>
        [Input("cortexNamespace")]
        public Input<string>? CortexNamespace { get; set; }

        /// <summary>
        /// Optional, kubernetes service account name that Cortex will use, for configuring the IRSA IAM role trust relationship. Default: cortex
        /// </summary>
        [Input("cortexServiceAccount")]
        public Input<string>? CortexServiceAccount { get; set; }

        /// <summary>
        /// Optional, name of bucket to create for Loki. Default: &lt;account-id&gt;-&lt;stack-name&gt;-loki
        /// </summary>
        [Input("lokiBucketName")]
        public Input<string>? LokiBucketName { get; set; }

        /// <summary>
        /// Optional, kubernetes namespace where Loki will exist, for configuring the IRSA IAM role trust relationship. Default: loki
        /// </summary>
        [Input("lokiNamespace")]
        public Input<string>? LokiNamespace { get; set; }

        /// <summary>
        /// Optional, kubernetes service account name that Loki will use, for configuring the IRSA IAM role trust relationship. Default: loki
        /// </summary>
        [Input("lokiServiceAccount")]
        public Input<string>? LokiServiceAccount { get; set; }

        /// <summary>
        /// Required, Arn of EKS OIDC Provider for configuring the IRSA  IAM role trust relationship.
        /// </summary>
        [Input("oidcProviderArn", required: true)]
        public Input<string> OidcProviderArn { get; set; } = null!;

        /// <summary>
        /// Required, URL of EKS OIDC Provider for configuring the IRSA  IAM role trust relationship.
        /// </summary>
        [Input("oidcProviderUrl", required: true)]
        public Input<string> OidcProviderUrl { get; set; } = null!;

        public ObservabilityDependenciesArgs()
        {
        }
    }
}
