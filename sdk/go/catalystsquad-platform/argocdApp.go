// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package catalystsquadplatform

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ArgocdApp struct {
	pulumi.ResourceState
}

// NewArgocdApp registers a new resource with the given unique name, arguments, and options.
func NewArgocdApp(ctx *pulumi.Context,
	name string, args *ArgocdAppArgs, opts ...pulumi.ResourceOption) (*ArgocdApp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ArgocdApp
	err := ctx.RegisterRemoteComponentResource("catalystsquad-platform:index:ArgocdApp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type argocdAppArgs struct {
	// Optional, apiVersion of the Argocd Application. Default: v1alpha1
	ApiVersion *string `pulumi:"apiVersion"`
	// Required, name of the Argocd Application
	Name string `pulumi:"name"`
	// Optional, namespace to deploy Argocd Application to. Should be the namespace where the argocd server runs. Default: "argo-cd"
	Namespace *string `pulumi:"namespace"`
	// Required, spec of the Argocd Application
	Spec *ArgocdApplication `pulumi:"spec"`
}

// The set of arguments for constructing a ArgocdApp resource.
type ArgocdAppArgs struct {
	// Optional, apiVersion of the Argocd Application. Default: v1alpha1
	ApiVersion pulumi.StringPtrInput
	// Required, name of the Argocd Application
	Name pulumi.StringInput
	// Optional, namespace to deploy Argocd Application to. Should be the namespace where the argocd server runs. Default: "argo-cd"
	Namespace pulumi.StringPtrInput
	// Required, spec of the Argocd Application
	Spec ArgocdApplicationPtrInput
}

func (ArgocdAppArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*argocdAppArgs)(nil)).Elem()
}

type ArgocdAppInput interface {
	pulumi.Input

	ToArgocdAppOutput() ArgocdAppOutput
	ToArgocdAppOutputWithContext(ctx context.Context) ArgocdAppOutput
}

func (*ArgocdApp) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgocdApp)(nil)).Elem()
}

func (i *ArgocdApp) ToArgocdAppOutput() ArgocdAppOutput {
	return i.ToArgocdAppOutputWithContext(context.Background())
}

func (i *ArgocdApp) ToArgocdAppOutputWithContext(ctx context.Context) ArgocdAppOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgocdAppOutput)
}

// ArgocdAppArrayInput is an input type that accepts ArgocdAppArray and ArgocdAppArrayOutput values.
// You can construct a concrete instance of `ArgocdAppArrayInput` via:
//
//          ArgocdAppArray{ ArgocdAppArgs{...} }
type ArgocdAppArrayInput interface {
	pulumi.Input

	ToArgocdAppArrayOutput() ArgocdAppArrayOutput
	ToArgocdAppArrayOutputWithContext(context.Context) ArgocdAppArrayOutput
}

type ArgocdAppArray []ArgocdAppInput

func (ArgocdAppArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ArgocdApp)(nil)).Elem()
}

func (i ArgocdAppArray) ToArgocdAppArrayOutput() ArgocdAppArrayOutput {
	return i.ToArgocdAppArrayOutputWithContext(context.Background())
}

func (i ArgocdAppArray) ToArgocdAppArrayOutputWithContext(ctx context.Context) ArgocdAppArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgocdAppArrayOutput)
}

// ArgocdAppMapInput is an input type that accepts ArgocdAppMap and ArgocdAppMapOutput values.
// You can construct a concrete instance of `ArgocdAppMapInput` via:
//
//          ArgocdAppMap{ "key": ArgocdAppArgs{...} }
type ArgocdAppMapInput interface {
	pulumi.Input

	ToArgocdAppMapOutput() ArgocdAppMapOutput
	ToArgocdAppMapOutputWithContext(context.Context) ArgocdAppMapOutput
}

type ArgocdAppMap map[string]ArgocdAppInput

func (ArgocdAppMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ArgocdApp)(nil)).Elem()
}

func (i ArgocdAppMap) ToArgocdAppMapOutput() ArgocdAppMapOutput {
	return i.ToArgocdAppMapOutputWithContext(context.Background())
}

func (i ArgocdAppMap) ToArgocdAppMapOutputWithContext(ctx context.Context) ArgocdAppMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgocdAppMapOutput)
}

type ArgocdAppOutput struct{ *pulumi.OutputState }

func (ArgocdAppOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgocdApp)(nil)).Elem()
}

func (o ArgocdAppOutput) ToArgocdAppOutput() ArgocdAppOutput {
	return o
}

func (o ArgocdAppOutput) ToArgocdAppOutputWithContext(ctx context.Context) ArgocdAppOutput {
	return o
}

type ArgocdAppArrayOutput struct{ *pulumi.OutputState }

func (ArgocdAppArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ArgocdApp)(nil)).Elem()
}

func (o ArgocdAppArrayOutput) ToArgocdAppArrayOutput() ArgocdAppArrayOutput {
	return o
}

func (o ArgocdAppArrayOutput) ToArgocdAppArrayOutputWithContext(ctx context.Context) ArgocdAppArrayOutput {
	return o
}

func (o ArgocdAppArrayOutput) Index(i pulumi.IntInput) ArgocdAppOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ArgocdApp {
		return vs[0].([]*ArgocdApp)[vs[1].(int)]
	}).(ArgocdAppOutput)
}

type ArgocdAppMapOutput struct{ *pulumi.OutputState }

func (ArgocdAppMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ArgocdApp)(nil)).Elem()
}

func (o ArgocdAppMapOutput) ToArgocdAppMapOutput() ArgocdAppMapOutput {
	return o
}

func (o ArgocdAppMapOutput) ToArgocdAppMapOutputWithContext(ctx context.Context) ArgocdAppMapOutput {
	return o
}

func (o ArgocdAppMapOutput) MapIndex(k pulumi.StringInput) ArgocdAppOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ArgocdApp {
		return vs[0].(map[string]*ArgocdApp)[vs[1].(string)]
	}).(ArgocdAppOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ArgocdAppInput)(nil)).Elem(), &ArgocdApp{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArgocdAppArrayInput)(nil)).Elem(), ArgocdAppArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArgocdAppMapInput)(nil)).Elem(), ArgocdAppMap{})
	pulumi.RegisterOutputType(ArgocdAppOutput{})
	pulumi.RegisterOutputType(ArgocdAppArrayOutput{})
	pulumi.RegisterOutputType(ArgocdAppMapOutput{})
}
