// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package catalystsquadplatform

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VeleroDependencies struct {
	pulumi.ResourceState
}

// NewVeleroDependencies registers a new resource with the given unique name, arguments, and options.
func NewVeleroDependencies(ctx *pulumi.Context,
	name string, args *VeleroDependenciesArgs, opts ...pulumi.ResourceOption) (*VeleroDependencies, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OidcProviderArn == nil {
		return nil, errors.New("invalid value for required argument 'OidcProviderArn'")
	}
	if args.OidcProviderUrl == nil {
		return nil, errors.New("invalid value for required argument 'OidcProviderUrl'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource VeleroDependencies
	err := ctx.RegisterRemoteComponentResource("catalystsquad-platform:index:VeleroDependencies", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type veleroDependenciesArgs struct {
	// Optional, whether to create the Velero S3 bucket. Allows the bucket to exist outside of pulumi. Default: true
	CreateBucket *bool `pulumi:"createBucket"`
	// Required, Arn of EKS OIDC Provider for configuring the IRSA  IAM role trust relationship.
	OidcProviderArn string `pulumi:"oidcProviderArn"`
	// Required, URL of EKS OIDC Provider for configuring the IRSA  IAM role trust relationship.
	OidcProviderUrl string `pulumi:"oidcProviderUrl"`
	// Optional, Velero's bucket name. Default: <account-id>-<stack-name>-velero
	VeleroBucketName *string `pulumi:"veleroBucketName"`
	// Optional, Velero's IAM policy name. Default: <stack-name>-velero-policy
	VeleroIAMPolicyName *string `pulumi:"veleroIAMPolicyName"`
	// Optional, Velero's IAM role name. Default: <stack-name>-velero-role
	VeleroIAMRoleName *string `pulumi:"veleroIAMRoleName"`
	// Optional, kubernetes namespace where Velero will exist, for configuring the IRSA IAM role trust relationship. Default: velero
	VeleroNamespace *string `pulumi:"veleroNamespace"`
	// Optional, kubernetes service account name that Velero will use, for configuring the IRSA IAM role trust relationship. Default: velero
	VeleroServiceAccount *string `pulumi:"veleroServiceAccount"`
}

// The set of arguments for constructing a VeleroDependencies resource.
type VeleroDependenciesArgs struct {
	// Optional, whether to create the Velero S3 bucket. Allows the bucket to exist outside of pulumi. Default: true
	CreateBucket pulumi.BoolPtrInput
	// Required, Arn of EKS OIDC Provider for configuring the IRSA  IAM role trust relationship.
	OidcProviderArn pulumi.StringInput
	// Required, URL of EKS OIDC Provider for configuring the IRSA  IAM role trust relationship.
	OidcProviderUrl pulumi.StringInput
	// Optional, Velero's bucket name. Default: <account-id>-<stack-name>-velero
	VeleroBucketName pulumi.StringPtrInput
	// Optional, Velero's IAM policy name. Default: <stack-name>-velero-policy
	VeleroIAMPolicyName pulumi.StringPtrInput
	// Optional, Velero's IAM role name. Default: <stack-name>-velero-role
	VeleroIAMRoleName pulumi.StringPtrInput
	// Optional, kubernetes namespace where Velero will exist, for configuring the IRSA IAM role trust relationship. Default: velero
	VeleroNamespace pulumi.StringPtrInput
	// Optional, kubernetes service account name that Velero will use, for configuring the IRSA IAM role trust relationship. Default: velero
	VeleroServiceAccount pulumi.StringPtrInput
}

func (VeleroDependenciesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*veleroDependenciesArgs)(nil)).Elem()
}

type VeleroDependenciesInput interface {
	pulumi.Input

	ToVeleroDependenciesOutput() VeleroDependenciesOutput
	ToVeleroDependenciesOutputWithContext(ctx context.Context) VeleroDependenciesOutput
}

func (*VeleroDependencies) ElementType() reflect.Type {
	return reflect.TypeOf((**VeleroDependencies)(nil)).Elem()
}

func (i *VeleroDependencies) ToVeleroDependenciesOutput() VeleroDependenciesOutput {
	return i.ToVeleroDependenciesOutputWithContext(context.Background())
}

func (i *VeleroDependencies) ToVeleroDependenciesOutputWithContext(ctx context.Context) VeleroDependenciesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VeleroDependenciesOutput)
}

// VeleroDependenciesArrayInput is an input type that accepts VeleroDependenciesArray and VeleroDependenciesArrayOutput values.
// You can construct a concrete instance of `VeleroDependenciesArrayInput` via:
//
//          VeleroDependenciesArray{ VeleroDependenciesArgs{...} }
type VeleroDependenciesArrayInput interface {
	pulumi.Input

	ToVeleroDependenciesArrayOutput() VeleroDependenciesArrayOutput
	ToVeleroDependenciesArrayOutputWithContext(context.Context) VeleroDependenciesArrayOutput
}

type VeleroDependenciesArray []VeleroDependenciesInput

func (VeleroDependenciesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VeleroDependencies)(nil)).Elem()
}

func (i VeleroDependenciesArray) ToVeleroDependenciesArrayOutput() VeleroDependenciesArrayOutput {
	return i.ToVeleroDependenciesArrayOutputWithContext(context.Background())
}

func (i VeleroDependenciesArray) ToVeleroDependenciesArrayOutputWithContext(ctx context.Context) VeleroDependenciesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VeleroDependenciesArrayOutput)
}

// VeleroDependenciesMapInput is an input type that accepts VeleroDependenciesMap and VeleroDependenciesMapOutput values.
// You can construct a concrete instance of `VeleroDependenciesMapInput` via:
//
//          VeleroDependenciesMap{ "key": VeleroDependenciesArgs{...} }
type VeleroDependenciesMapInput interface {
	pulumi.Input

	ToVeleroDependenciesMapOutput() VeleroDependenciesMapOutput
	ToVeleroDependenciesMapOutputWithContext(context.Context) VeleroDependenciesMapOutput
}

type VeleroDependenciesMap map[string]VeleroDependenciesInput

func (VeleroDependenciesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VeleroDependencies)(nil)).Elem()
}

func (i VeleroDependenciesMap) ToVeleroDependenciesMapOutput() VeleroDependenciesMapOutput {
	return i.ToVeleroDependenciesMapOutputWithContext(context.Background())
}

func (i VeleroDependenciesMap) ToVeleroDependenciesMapOutputWithContext(ctx context.Context) VeleroDependenciesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VeleroDependenciesMapOutput)
}

type VeleroDependenciesOutput struct{ *pulumi.OutputState }

func (VeleroDependenciesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VeleroDependencies)(nil)).Elem()
}

func (o VeleroDependenciesOutput) ToVeleroDependenciesOutput() VeleroDependenciesOutput {
	return o
}

func (o VeleroDependenciesOutput) ToVeleroDependenciesOutputWithContext(ctx context.Context) VeleroDependenciesOutput {
	return o
}

type VeleroDependenciesArrayOutput struct{ *pulumi.OutputState }

func (VeleroDependenciesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VeleroDependencies)(nil)).Elem()
}

func (o VeleroDependenciesArrayOutput) ToVeleroDependenciesArrayOutput() VeleroDependenciesArrayOutput {
	return o
}

func (o VeleroDependenciesArrayOutput) ToVeleroDependenciesArrayOutputWithContext(ctx context.Context) VeleroDependenciesArrayOutput {
	return o
}

func (o VeleroDependenciesArrayOutput) Index(i pulumi.IntInput) VeleroDependenciesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VeleroDependencies {
		return vs[0].([]*VeleroDependencies)[vs[1].(int)]
	}).(VeleroDependenciesOutput)
}

type VeleroDependenciesMapOutput struct{ *pulumi.OutputState }

func (VeleroDependenciesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VeleroDependencies)(nil)).Elem()
}

func (o VeleroDependenciesMapOutput) ToVeleroDependenciesMapOutput() VeleroDependenciesMapOutput {
	return o
}

func (o VeleroDependenciesMapOutput) ToVeleroDependenciesMapOutputWithContext(ctx context.Context) VeleroDependenciesMapOutput {
	return o
}

func (o VeleroDependenciesMapOutput) MapIndex(k pulumi.StringInput) VeleroDependenciesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VeleroDependencies {
		return vs[0].(map[string]*VeleroDependencies)[vs[1].(string)]
	}).(VeleroDependenciesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VeleroDependenciesInput)(nil)).Elem(), &VeleroDependencies{})
	pulumi.RegisterInputType(reflect.TypeOf((*VeleroDependenciesArrayInput)(nil)).Elem(), VeleroDependenciesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VeleroDependenciesMapInput)(nil)).Elem(), VeleroDependenciesMap{})
	pulumi.RegisterOutputType(VeleroDependenciesOutput{})
	pulumi.RegisterOutputType(VeleroDependenciesArrayOutput{})
	pulumi.RegisterOutputType(VeleroDependenciesMapOutput{})
}
