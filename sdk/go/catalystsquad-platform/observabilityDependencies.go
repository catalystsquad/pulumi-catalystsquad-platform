// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package catalystsquadplatform

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ObservabilityDependencies struct {
	pulumi.ResourceState
}

// NewObservabilityDependencies registers a new resource with the given unique name, arguments, and options.
func NewObservabilityDependencies(ctx *pulumi.Context,
	name string, args *ObservabilityDependenciesArgs, opts ...pulumi.ResourceOption) (*ObservabilityDependencies, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OidcProviderArn == nil {
		return nil, errors.New("invalid value for required argument 'OidcProviderArn'")
	}
	if args.OidcProviderUrl == nil {
		return nil, errors.New("invalid value for required argument 'OidcProviderUrl'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ObservabilityDependencies
	err := ctx.RegisterRemoteComponentResource("catalystsquad-platform:index:ObservabilityDependencies", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type observabilityDependenciesArgs struct {
	// Optional, name of bucket to create for Cortex. Default: <account-id>-<stack-name>-cortex
	CortexBucketName *string `pulumi:"cortexBucketName"`
	// Optional, kubernetes namespace where Cortex will exist, for configuring the IRSA IAM role trust relationship. Default: cortex
	CortexNamespace *string `pulumi:"cortexNamespace"`
	// Optional, kubernetes service account name that Cortex will use, for configuring the IRSA IAM role trust relationship. Default: cortex
	CortexServiceAccount *string `pulumi:"cortexServiceAccount"`
	// Optional, name of bucket to create for Loki. Default: <account-id>-<stack-name>-loki
	LokiBucketName *string `pulumi:"lokiBucketName"`
	// Optional, kubernetes namespace where Loki will exist, for configuring the IRSA IAM role trust relationship. Default: loki
	LokiNamespace *string `pulumi:"lokiNamespace"`
	// Optional, kubernetes service account name that Loki will use, for configuring the IRSA IAM role trust relationship. Default: loki
	LokiServiceAccount *string `pulumi:"lokiServiceAccount"`
	// TODO FIXME
	OidcProviderArn string `pulumi:"oidcProviderArn"`
	// TODO FIXME
	OidcProviderUrl string `pulumi:"oidcProviderUrl"`
}

// The set of arguments for constructing a ObservabilityDependencies resource.
type ObservabilityDependenciesArgs struct {
	// Optional, name of bucket to create for Cortex. Default: <account-id>-<stack-name>-cortex
	CortexBucketName pulumi.StringPtrInput
	// Optional, kubernetes namespace where Cortex will exist, for configuring the IRSA IAM role trust relationship. Default: cortex
	CortexNamespace pulumi.StringPtrInput
	// Optional, kubernetes service account name that Cortex will use, for configuring the IRSA IAM role trust relationship. Default: cortex
	CortexServiceAccount pulumi.StringPtrInput
	// Optional, name of bucket to create for Loki. Default: <account-id>-<stack-name>-loki
	LokiBucketName pulumi.StringPtrInput
	// Optional, kubernetes namespace where Loki will exist, for configuring the IRSA IAM role trust relationship. Default: loki
	LokiNamespace pulumi.StringPtrInput
	// Optional, kubernetes service account name that Loki will use, for configuring the IRSA IAM role trust relationship. Default: loki
	LokiServiceAccount pulumi.StringPtrInput
	// TODO FIXME
	OidcProviderArn pulumi.StringInput
	// TODO FIXME
	OidcProviderUrl pulumi.StringInput
}

func (ObservabilityDependenciesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*observabilityDependenciesArgs)(nil)).Elem()
}

type ObservabilityDependenciesInput interface {
	pulumi.Input

	ToObservabilityDependenciesOutput() ObservabilityDependenciesOutput
	ToObservabilityDependenciesOutputWithContext(ctx context.Context) ObservabilityDependenciesOutput
}

func (*ObservabilityDependencies) ElementType() reflect.Type {
	return reflect.TypeOf((**ObservabilityDependencies)(nil)).Elem()
}

func (i *ObservabilityDependencies) ToObservabilityDependenciesOutput() ObservabilityDependenciesOutput {
	return i.ToObservabilityDependenciesOutputWithContext(context.Background())
}

func (i *ObservabilityDependencies) ToObservabilityDependenciesOutputWithContext(ctx context.Context) ObservabilityDependenciesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityDependenciesOutput)
}

// ObservabilityDependenciesArrayInput is an input type that accepts ObservabilityDependenciesArray and ObservabilityDependenciesArrayOutput values.
// You can construct a concrete instance of `ObservabilityDependenciesArrayInput` via:
//
//          ObservabilityDependenciesArray{ ObservabilityDependenciesArgs{...} }
type ObservabilityDependenciesArrayInput interface {
	pulumi.Input

	ToObservabilityDependenciesArrayOutput() ObservabilityDependenciesArrayOutput
	ToObservabilityDependenciesArrayOutputWithContext(context.Context) ObservabilityDependenciesArrayOutput
}

type ObservabilityDependenciesArray []ObservabilityDependenciesInput

func (ObservabilityDependenciesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ObservabilityDependencies)(nil)).Elem()
}

func (i ObservabilityDependenciesArray) ToObservabilityDependenciesArrayOutput() ObservabilityDependenciesArrayOutput {
	return i.ToObservabilityDependenciesArrayOutputWithContext(context.Background())
}

func (i ObservabilityDependenciesArray) ToObservabilityDependenciesArrayOutputWithContext(ctx context.Context) ObservabilityDependenciesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityDependenciesArrayOutput)
}

// ObservabilityDependenciesMapInput is an input type that accepts ObservabilityDependenciesMap and ObservabilityDependenciesMapOutput values.
// You can construct a concrete instance of `ObservabilityDependenciesMapInput` via:
//
//          ObservabilityDependenciesMap{ "key": ObservabilityDependenciesArgs{...} }
type ObservabilityDependenciesMapInput interface {
	pulumi.Input

	ToObservabilityDependenciesMapOutput() ObservabilityDependenciesMapOutput
	ToObservabilityDependenciesMapOutputWithContext(context.Context) ObservabilityDependenciesMapOutput
}

type ObservabilityDependenciesMap map[string]ObservabilityDependenciesInput

func (ObservabilityDependenciesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ObservabilityDependencies)(nil)).Elem()
}

func (i ObservabilityDependenciesMap) ToObservabilityDependenciesMapOutput() ObservabilityDependenciesMapOutput {
	return i.ToObservabilityDependenciesMapOutputWithContext(context.Background())
}

func (i ObservabilityDependenciesMap) ToObservabilityDependenciesMapOutputWithContext(ctx context.Context) ObservabilityDependenciesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityDependenciesMapOutput)
}

type ObservabilityDependenciesOutput struct{ *pulumi.OutputState }

func (ObservabilityDependenciesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObservabilityDependencies)(nil)).Elem()
}

func (o ObservabilityDependenciesOutput) ToObservabilityDependenciesOutput() ObservabilityDependenciesOutput {
	return o
}

func (o ObservabilityDependenciesOutput) ToObservabilityDependenciesOutputWithContext(ctx context.Context) ObservabilityDependenciesOutput {
	return o
}

type ObservabilityDependenciesArrayOutput struct{ *pulumi.OutputState }

func (ObservabilityDependenciesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ObservabilityDependencies)(nil)).Elem()
}

func (o ObservabilityDependenciesArrayOutput) ToObservabilityDependenciesArrayOutput() ObservabilityDependenciesArrayOutput {
	return o
}

func (o ObservabilityDependenciesArrayOutput) ToObservabilityDependenciesArrayOutputWithContext(ctx context.Context) ObservabilityDependenciesArrayOutput {
	return o
}

func (o ObservabilityDependenciesArrayOutput) Index(i pulumi.IntInput) ObservabilityDependenciesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ObservabilityDependencies {
		return vs[0].([]*ObservabilityDependencies)[vs[1].(int)]
	}).(ObservabilityDependenciesOutput)
}

type ObservabilityDependenciesMapOutput struct{ *pulumi.OutputState }

func (ObservabilityDependenciesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ObservabilityDependencies)(nil)).Elem()
}

func (o ObservabilityDependenciesMapOutput) ToObservabilityDependenciesMapOutput() ObservabilityDependenciesMapOutput {
	return o
}

func (o ObservabilityDependenciesMapOutput) ToObservabilityDependenciesMapOutputWithContext(ctx context.Context) ObservabilityDependenciesMapOutput {
	return o
}

func (o ObservabilityDependenciesMapOutput) MapIndex(k pulumi.StringInput) ObservabilityDependenciesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ObservabilityDependencies {
		return vs[0].(map[string]*ObservabilityDependencies)[vs[1].(string)]
	}).(ObservabilityDependenciesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ObservabilityDependenciesInput)(nil)).Elem(), &ObservabilityDependencies{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObservabilityDependenciesArrayInput)(nil)).Elem(), ObservabilityDependenciesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObservabilityDependenciesMapInput)(nil)).Elem(), ObservabilityDependenciesMap{})
	pulumi.RegisterOutputType(ObservabilityDependenciesOutput{})
	pulumi.RegisterOutputType(ObservabilityDependenciesArrayOutput{})
	pulumi.RegisterOutputType(ObservabilityDependenciesMapOutput{})
}
