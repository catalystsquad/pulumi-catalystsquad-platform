// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package catalystsquad

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configuration supplied to AvailabilityZone list in VpcArgs to specify which availability zones to deploy to and what subnet configuration for each availability zone. Supports one private and public subnet per AZ.
type AvailabilityZone struct {
	// Name of the availability zone to deploy subnets to.
	AzName string `pulumi:"azName"`
	// CIDR for private subnets in the availability zone. If not supplied, the subnet is not created.
	PrivateSubnetCidr *string `pulumi:"privateSubnetCidr"`
	// CIDR for private subnets in the availability zone. If not supplied the subnet is not created.
	PublicSubnetCidr *string `pulumi:"publicSubnetCidr"`
}

// AvailabilityZoneInput is an input type that accepts AvailabilityZoneArgs and AvailabilityZoneOutput values.
// You can construct a concrete instance of `AvailabilityZoneInput` via:
//
//          AvailabilityZoneArgs{...}
type AvailabilityZoneInput interface {
	pulumi.Input

	ToAvailabilityZoneOutput() AvailabilityZoneOutput
	ToAvailabilityZoneOutputWithContext(context.Context) AvailabilityZoneOutput
}

// Configuration supplied to AvailabilityZone list in VpcArgs to specify which availability zones to deploy to and what subnet configuration for each availability zone. Supports one private and public subnet per AZ.
type AvailabilityZoneArgs struct {
	// Name of the availability zone to deploy subnets to.
	AzName pulumi.StringInput `pulumi:"azName"`
	// CIDR for private subnets in the availability zone. If not supplied, the subnet is not created.
	PrivateSubnetCidr pulumi.StringPtrInput `pulumi:"privateSubnetCidr"`
	// CIDR for private subnets in the availability zone. If not supplied the subnet is not created.
	PublicSubnetCidr pulumi.StringPtrInput `pulumi:"publicSubnetCidr"`
}

func (AvailabilityZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AvailabilityZone)(nil)).Elem()
}

func (i AvailabilityZoneArgs) ToAvailabilityZoneOutput() AvailabilityZoneOutput {
	return i.ToAvailabilityZoneOutputWithContext(context.Background())
}

func (i AvailabilityZoneArgs) ToAvailabilityZoneOutputWithContext(ctx context.Context) AvailabilityZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvailabilityZoneOutput)
}

// AvailabilityZoneArrayInput is an input type that accepts AvailabilityZoneArray and AvailabilityZoneArrayOutput values.
// You can construct a concrete instance of `AvailabilityZoneArrayInput` via:
//
//          AvailabilityZoneArray{ AvailabilityZoneArgs{...} }
type AvailabilityZoneArrayInput interface {
	pulumi.Input

	ToAvailabilityZoneArrayOutput() AvailabilityZoneArrayOutput
	ToAvailabilityZoneArrayOutputWithContext(context.Context) AvailabilityZoneArrayOutput
}

type AvailabilityZoneArray []AvailabilityZoneInput

func (AvailabilityZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AvailabilityZone)(nil)).Elem()
}

func (i AvailabilityZoneArray) ToAvailabilityZoneArrayOutput() AvailabilityZoneArrayOutput {
	return i.ToAvailabilityZoneArrayOutputWithContext(context.Background())
}

func (i AvailabilityZoneArray) ToAvailabilityZoneArrayOutputWithContext(ctx context.Context) AvailabilityZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvailabilityZoneArrayOutput)
}

// Configuration supplied to AvailabilityZone list in VpcArgs to specify which availability zones to deploy to and what subnet configuration for each availability zone. Supports one private and public subnet per AZ.
type AvailabilityZoneOutput struct{ *pulumi.OutputState }

func (AvailabilityZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AvailabilityZone)(nil)).Elem()
}

func (o AvailabilityZoneOutput) ToAvailabilityZoneOutput() AvailabilityZoneOutput {
	return o
}

func (o AvailabilityZoneOutput) ToAvailabilityZoneOutputWithContext(ctx context.Context) AvailabilityZoneOutput {
	return o
}

// Name of the availability zone to deploy subnets to.
func (o AvailabilityZoneOutput) AzName() pulumi.StringOutput {
	return o.ApplyT(func(v AvailabilityZone) string { return v.AzName }).(pulumi.StringOutput)
}

// CIDR for private subnets in the availability zone. If not supplied, the subnet is not created.
func (o AvailabilityZoneOutput) PrivateSubnetCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AvailabilityZone) *string { return v.PrivateSubnetCidr }).(pulumi.StringPtrOutput)
}

// CIDR for private subnets in the availability zone. If not supplied the subnet is not created.
func (o AvailabilityZoneOutput) PublicSubnetCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AvailabilityZone) *string { return v.PublicSubnetCidr }).(pulumi.StringPtrOutput)
}

type AvailabilityZoneArrayOutput struct{ *pulumi.OutputState }

func (AvailabilityZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AvailabilityZone)(nil)).Elem()
}

func (o AvailabilityZoneArrayOutput) ToAvailabilityZoneArrayOutput() AvailabilityZoneArrayOutput {
	return o
}

func (o AvailabilityZoneArrayOutput) ToAvailabilityZoneArrayOutputWithContext(ctx context.Context) AvailabilityZoneArrayOutput {
	return o
}

func (o AvailabilityZoneArrayOutput) Index(i pulumi.IntInput) AvailabilityZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AvailabilityZone {
		return vs[0].([]AvailabilityZone)[vs[1].(int)]
	}).(AvailabilityZoneOutput)
}

func init() {
	pulumi.RegisterOutputType(AvailabilityZoneOutput{})
	pulumi.RegisterOutputType(AvailabilityZoneArrayOutput{})
}
