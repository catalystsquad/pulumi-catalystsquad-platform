// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export class ArgocdApp extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'catalystsquad-platform:index:ArgocdApp';

    /**
     * Returns true if the given object is an instance of ArgocdApp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ArgocdApp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ArgocdApp.__pulumiType;
    }


    /**
     * Create a ArgocdApp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ArgocdAppArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["apiVersion"] = args ? args.apiVersion : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["spec"] = args ? args.spec : undefined;
        } else {
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ArgocdApp.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a ArgocdApp resource.
 */
export interface ArgocdAppArgs {
    /**
     * Optional, apiVersion of the Argocd Application. Default: v1alpha1
     */
    apiVersion?: pulumi.Input<string>;
    /**
     * Required, name of the Argocd Application
     */
    name: pulumi.Input<string>;
    /**
     * Optional, namespace to deploy Argocd Application to. Should be the namespace where the argocd server runs. Default: "argo-cd"
     */
    namespace?: pulumi.Input<string>;
    /**
     * Required, spec of the Argocd Application
     */
    spec?: pulumi.Input<inputs.ArgocdApplicationArgs>;
}
